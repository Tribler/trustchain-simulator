%description:
Testing RandomDistinctPicker class

%file: omnetpp.ini
[General]
**.evilNodeIds = "1 2"
set cmdenv-interactive=true


%file: test.ned

simple Sender
{
    gates:
        input in;
        output out;
}

simple Receiver
{ 
	parameters:
        string evilNodeIds = "1 2 3";
    gates:
        input in;
        output out;
}

network Test
{
    submodules:
        theSender : Sender;
        theReceiver : Receiver;
    connections:
        theSender.out --> theReceiver.in;
        theSender.in  <-- theReceiver.out;
}



%file: test.cc

#include <omnetpp.h>
#include <bits/stdc++.h>
#include <vector>
#include <cstdlib>
#include <iostream>
#include <unordered_set>

using namespace omnetpp;

namespace @TESTNAME@ {

class Sender : public cSimpleModule
{
  public:
    Sender() : cSimpleModule(32768) { }
	virtual void activity() override;
};

Define_Module(Sender);

void Sender::activity()
{	
   cMessage *msg = new cMessage();
   sendDelayed(msg, 0.3456, "out");
}

class Receiver : public cSimpleModule
{
  public:
    Receiver() : cSimpleModule(32768) { }
    virtual void activity() override;
};

Define_Module(Receiver);

void Receiver::activity()
{
   cMessage *msg = receive();
	
	std::vector<int> evilNodeIds;
	const char *evilNodeIdsPar = par("evilNodeIds");
    cStringTokenizer tokenizer(evilNodeIdsPar);
    const char *token;
    while ((token = tokenizer.nextToken()) != nullptr)
        evilNodeIds.push_back(atoi(token));
    if (evilNodeIds.size() == 3) {
		EV << "result: "<<1<< endl;
    }else{
		EV << "result: "<<0<< endl;
	}
}

}; //namespace

%contains: stdout
result: 1

