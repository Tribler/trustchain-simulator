%description:
Testing RandomDistinctPicker class

%file: test.ned

simple Sender
{
    gates:
        input in;
        output out;
}

simple Receiver
{
    gates:
        input in;
        output out;
}

network Test
{
    submodules:
        theSender : Sender;
        theReceiver : Receiver;
    connections:
        theSender.out --> theReceiver.in;
        theSender.in  <-- theReceiver.out;
}



%file: test.cc

#include <omnetpp.h>
#include <bits/stdc++.h>
#include <vector>
#include <cstdlib>
#include <iostream>
#include <unordered_set>

using namespace omnetpp;

class RandomDistinctPicker
{
public:
    int seedIncremental;
    int seedCore;
    int min, max;
    std::unordered_set<int> intSet;
    int resultProided;

    RandomDistinctPicker(int min, int max, int seedCore)
    {
        this->min = min;
        this->max = max;
        this->seedCore = seedCore;
        seedIncremental = 0;
        resultProided = 0;
    }

    int getRandomNumber()
    {
        if (resultProided >= (max - min + 1))
            return min;

        int posibleRandomNum = rand();
        while (intSet.find(posibleRandomNum) != intSet.end()) {
            posibleRandomNum = rand();
        }
        intSet.insert(posibleRandomNum);
        resultProided++;
        return posibleRandomNum;
    }
};

namespace @TESTNAME@ {

class Sender : public cSimpleModule
{
  public:
    Sender() : cSimpleModule(32768) { }
	virtual void activity() override;
};

Define_Module(Sender);

void Sender::activity()
{	
   cMessage *msg = new cMessage();
   sendDelayed(msg, 0.3456, "out");
}

class Receiver : public cSimpleModule
{
  public:
    Receiver() : cSimpleModule(32768) { }
    virtual void activity() override;
};

Define_Module(Receiver);

void Receiver::activity()
{
   cMessage *msg = receive();
   simtime_t diff = simTime() - msg->getTimestamp();
   EV << "diff: " << diff << endl;
   
   RandomDistinctPicker *rand = new RandomDistinctPicker(0, 1, 1);
   int a = rand->getRandomNumber();
   int b = rand->getRandomNumber();
   int c = rand->getRandomNumber();

   
	if(a==0 && b==1 && c==0){
	   EV << "result: "<<1<< endl;
	}else if(a==1 && b==0 && c==0){
	   EV << "result: "<<1<< endl;
	}else{
		EV << "result: "<<0<< endl;
	}
}

}; //namespace

%contains: stdout
diff: 0.3456
result: 0

