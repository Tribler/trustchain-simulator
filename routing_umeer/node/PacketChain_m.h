//
// Generated file, do not edit! Created by nedtool 5.4 from node/PacketChain.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __PACKETCHAIN_M_H
#define __PACKETCHAIN_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



class PacketChain;
/**
 * Class generated from <tt>node/PacketChain.msg:2</tt> by nedtool.
 * <pre>
 * packet PacketChain
 * {
 *     int srcAddr \@packetData;
 *     int destAddr \@packetData;
 *     int hopCount \@packetData;
 *     int extraInfo \@packetData;
 * 
 *     int databaseSize \@packetData;
 *     int userA[] \@packetData;
 *     int userB[] \@packetData;
 *     int transaction[] \@packetData;
 * }
 * </pre>
 */
class PacketChain : public ::omnetpp::cPacket
{
  protected:
    int srcAddr = 0;
    int destAddr = 0;
    int hopCount = 0;
    int extraInfo = 0;
    int databaseSize = 0;
    int *userA = nullptr;
    size_t userA_arraysize = 0;
    int *userB = nullptr;
    size_t userB_arraysize = 0;
    int *transaction = nullptr;
    size_t transaction_arraysize = 0;

  private:
    void copy(const PacketChain& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PacketChain&);

  public:
    PacketChain(const char *name=nullptr, short kind=0);
    PacketChain(const PacketChain& other);
    virtual ~PacketChain();
    PacketChain& operator=(const PacketChain& other);
    virtual PacketChain *dup() const override {return new PacketChain(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSrcAddr() const;
    virtual void setSrcAddr(int srcAddr);
    virtual int getDestAddr() const;
    virtual void setDestAddr(int destAddr);
    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);
    virtual int getExtraInfo() const;
    virtual void setExtraInfo(int extraInfo);
    virtual int getDatabaseSize() const;
    virtual void setDatabaseSize(int databaseSize);
    virtual void setUserAArraySize(size_t size);
    virtual size_t getUserAArraySize() const;
    virtual int getUserA(size_t k) const;
    virtual void setUserA(size_t k, int userA);
    virtual void insertUserA(int userA);
    virtual void insertUserA(size_t k, int userA);
    virtual void eraseUserA(size_t k);
    virtual void setUserBArraySize(size_t size);
    virtual size_t getUserBArraySize() const;
    virtual int getUserB(size_t k) const;
    virtual void setUserB(size_t k, int userB);
    virtual void insertUserB(int userB);
    virtual void insertUserB(size_t k, int userB);
    virtual void eraseUserB(size_t k);
    virtual void setTransactionArraySize(size_t size);
    virtual size_t getTransactionArraySize() const;
    virtual int getTransaction(size_t k) const;
    virtual void setTransaction(size_t k, int transaction);
    virtual void insertTransaction(int transaction);
    virtual void insertTransaction(size_t k, int transaction);
    virtual void eraseTransaction(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PacketChain& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PacketChain& obj) {obj.parsimUnpack(b);}

#endif // ifndef __PACKETCHAIN_M_H

